# -*- coding: utf-8 -*-
"""circle plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/penguinprogramer/f7cc8e14abe7d3fbdb33dd9dceb8aac8/circle-plott.ipynb

# Step one: import required Librarys
"""

import matplotlib.pyplot as plt # to show the circles on  a graph
import math  # to calculate the euclidean distance of the circles

"""# step two define some helper functions to calculate the intersections and concentricity"""

def isconcentric(x1,y1,x2,y2):
  return x1==x2 and y1==y2 # concentric circles have the same x and y coordinates for their centers

def intersections(x1,y1, r1,x2,y2,r2):
  distance = math.sqrt( (x1-x2)**2 + (y1-y2)**2)  # calculate the eucledean distance from their centers using pythagoras's theorem
  if(distance<r1+r2): # if the distance wbetween the circles centers is less than the sum of their radai then they must overlap
    return 2
  elif(distance >r1+r2):
    return 0
  else:
    return 1

"""# Step three define the circles"""

CircleXCoordinate1 = 2  #@param {type: "slider", min: -10, max: 10}
CircleXCoordinate2 = 0  #@param {type: "slider", min: -10, max: 10}

CircleYCoordinate1 = -6  #@param {type: "slider",  min: -10, max: 10}
CircleYCoordinate2 = 2  #@param {type: "slider", min: -10, max: 10}

CircleRadius1 = 5  #@param {type: "slider", min: 0, max: 5}
CircleRadius2 = 5 #@param {type:"slider", min:0, max:5, step:1}



"""# Step four show the Diagram and output values for the interections and whether it is concentric"""

# i am using the alpha chanel to make the circles semitransparent which makes overlaps moore obvious
circle1 = plt.Circle((CircleXCoordinate1, CircleYCoordinate1), CircleRadius1, color='r', alpha=0.5 ) 
circle2 = plt.Circle((CircleXCoordinate2,CircleYCoordinate2), CircleRadius2, color='blue' ,alpha=0.5 )

fig, ax = plt.subplots() 
# here we are defining the dimensions of the plot
low  = -10
left = -10
right = 10
high = 10

plt.xlim((left, right))   
plt.ylim(low, high) 
ax.add_artist(circle1)
ax.add_artist(circle2)

# concentric holds the value "n't " if the circles are not concentric so that when it is added to the string it makes sense as a sentence
concentric = "n't" if not isconcentric(CircleXCoordinate1, CircleYCoordinate1, CircleXCoordinate2,CircleYCoordinate2) else ''

numintersections = intersections(CircleXCoordinate1, CircleYCoordinate1,CircleRadius1, CircleXCoordinate2,CircleYCoordinate2,CircleRadius2) # returns integer
txt  = f'the two circles are{concentric} concentric and they have {numintersections} intersection(s)'
# show caption
plt.figtext(0.5, 0.01, txt, wrap=True, horizontalalignment='center', fontsize=12) 

# optionally save picture of result
fig.savefig('plotcircles.png')
